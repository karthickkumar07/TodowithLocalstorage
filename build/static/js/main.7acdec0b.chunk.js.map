{"version":3,"sources":["Components/Todos.js","Components/TodoForm.js","App.js","serviceWorker.js","index.js"],"names":["Todos","todos","todoDone","ListGroup","className","map","todo","ListGroupItem","key","id","todoString","onClick","TodoForm","addTodos","useState","setTodoString","Form","onSubmit","e","preventDefault","alert","v4","FormGroup","InputGroup","Input","type","name","placeholder","value","onChange","target","InputGroupAddon","addonType","Button","color","App","setTodos","useEffect","localTodos","localStorage","getItem","JSON","parse","a","setItem","stringify","Container","fluid","filter","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"sVAmBeA,EAfD,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,MAAOC,EAAe,EAAfA,SACtB,OACE,kBAACC,EAAA,EAAD,CAAWC,UAAU,mBAClBH,EAAMI,KAAI,SAACC,GAAD,OACT,kBAACC,EAAA,EAAD,CAAeC,IAAKF,EAAKG,IACtBH,EAAKI,WACN,0BAAMN,UAAU,cAAcO,QAAS,kBAAMT,EAASI,EAAKG,MACzD,kBAAC,IAAD,a,wDCsCGG,EArCE,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SAAe,EACGC,mBAAS,IADZ,mBAC1BJ,EAD0B,KACdK,EADc,KAgBjC,OACE,kBAACC,EAAA,EAAD,CAAMC,SAda,SAACC,GAEpB,GADAA,EAAEC,iBACiB,KAAfT,EACF,OAAOU,MAAM,oBAEf,IAAMd,EAAO,CACXI,aACAD,GAAIY,eAENR,EAASP,GACTS,EAAc,MAKZ,kBAACO,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CACEC,KAAK,OACLC,KAAK,OACLjB,GAAG,OACHkB,YAAY,iBACZC,MAAOlB,EACPmB,SAAU,SAACX,GAAD,OAAOH,EAAcG,EAAEY,OAAOF,UAE1C,kBAACG,EAAA,EAAD,CAAiBC,UAAU,WACzB,kBAACC,EAAA,EAAD,CAAQC,MAAM,WAAd,mBCHGC,EA/BH,WAAO,IAAD,EACUrB,mBAAS,IADnB,mBACTb,EADS,KACFmC,EADE,KAGhBC,qBAAU,WACR,IAAMC,EAAaC,aAAaC,QAAQ,SACpCF,GACFF,EAASK,KAAKC,MAAMJ,MAErB,IAEH,IAAMzB,EAAQ,uCAAG,WAAOP,GAAP,SAAAqC,EAAA,sDACfP,EAAS,GAAD,mBAAKnC,GAAL,CAAYK,KADL,2CAAH,sDAYd,OAJA+B,qBAAU,WACRE,aAAaK,QAAQ,QAASH,KAAKI,UAAU5C,MAC5C,CAACA,IAGF,kBAAC6C,EAAA,EAAD,CAAWC,OAAK,GACd,wDACA,kBAAC,EAAD,CAAO9C,MAAOA,EAAOC,SAXR,SAACO,GAChB2B,EAASnC,EAAM+C,QAAO,SAAC1C,GAAD,OAAUA,EAAKG,KAAOA,SAW1C,kBAAC,EAAD,CAAUI,SAAUA,MCrBNoC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.7acdec0b.chunk.js","sourcesContent":["import React from \"react\";\nimport { ListGroup, ListGroupItem } from \"reactstrap\";\nimport { FaTrash } from \"react-icons/fa\";\n\nconst Todos = ({ todos, todoDone }) => {\n  return (\n    <ListGroup className=\"mt-5 mb-2 items\">\n      {todos.map((todo) => (\n        <ListGroupItem key={todo.id}>\n          {todo.todoString}\n          <span className=\"float-right\" onClick={() => todoDone(todo.id)}>\n            <FaTrash />\n          </span>\n        </ListGroupItem>\n      ))}\n    </ListGroup>\n  );\n};\n\nexport default Todos;\n","import React, { useState } from \"react\";\nimport {\n  FormGroup,\n  Input,\n  InputGroup,\n  InputGroupAddon,\n  Button,\n  Form,\n  Container,\n} from \"reactstrap\";\nimport { v4 } from \"uuid\";\n\nconst TodoForm = ({ addTodos }) => {\n  const [todoString, setTodoString] = useState(\"\");\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    if (todoString === \"\") {\n      return alert(\"fill your values\");\n    }\n    const todo = {\n      todoString,\n      id: v4(),\n    };\n    addTodos(todo);\n    setTodoString(\"\");\n  };\n\n  return (\n    <Form onSubmit={handleSubmit}>\n      <FormGroup>\n        <InputGroup>\n          <Input\n            type=\"text\"\n            name=\"todo\"\n            id=\"todo\"\n            placeholder=\"put your todoo\"\n            value={todoString}\n            onChange={(e) => setTodoString(e.target.value)}\n          />\n          <InputGroupAddon addonType=\"prepend\">\n            <Button color=\"warning\"> ADD TODO </Button>\n          </InputGroupAddon>\n        </InputGroup>\n      </FormGroup>\n    </Form>\n  );\n};\n\nexport default TodoForm;\n","import React, { useState, useEffect } from \"react\";\nimport { Container } from \"reactstrap\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"./App.css\";\nimport Todos from \"./Components/Todos\";\nimport TodoForm from \"./Components/TodoForm\";\n\nconst App = () => {\n  const [todos, setTodos] = useState([]);\n\n  useEffect(() => {\n    const localTodos = localStorage.getItem(\"todos\");\n    if (localTodos) {\n      setTodos(JSON.parse(localTodos));\n    }\n  }, []);\n\n  const addTodos = async (todo) => {\n    setTodos([...todos, todo]);\n  };\n\n  const todoDone = (id) => {\n    setTodos(todos.filter((todo) => todo.id !== id));\n  };\n\n  useEffect(() => {\n    localStorage.setItem(\"todos\", JSON.stringify(todos));\n  }, [todos]);\n\n  return (\n    <Container fluid>\n      <h1> Todo With Local storage</h1>\n      <Todos todos={todos} todoDone={todoDone} />\n      <TodoForm addTodos={addTodos} />\n    </Container>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}